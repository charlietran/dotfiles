#!/usr/bin/ruby
require 'irb/completion'
require 'irb/ext/save-history'
require 'rubygems'

if defined?(Rails) && Rails.respond_to?(:logger)
  require 'logger'
  Rails.logger = Logger.new($stdout)
  if defined?(Mongoid)
    Mongoid.logger = Rails.logger
  end
end

IRB.conf[:SAVE_HISTORY] = 1000
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb_history"

IRB.conf[:PROMPT_MODE] = :SIMPLE

IRB.conf[:AUTO_INDENT] = true

class Object
  # list methods which aren't in superclass
  def local_methods(obj = self)
    (obj.methods - obj.class.superclass.instance_methods).sort
  end

  # print documentation
  #
  #   ri 'Array#pop'
  #   Array.ri
  #   Array.ri :pop
  #   arr.ri :pop
  def ri(method = nil)
    unless method && method =~ /^[A-Z]/ # if class isn't specified
      klass = self.kind_of?(Class) ? name : self.class.name
      method = [klass, method].compact.join('#')
    end
    puts `ri '#{method}'`
  end


end

def fields(model)
  puts "Columns for '#{model.table_name}'"
  width = model.columns.inject(0) { |max_width, col| col.name.size > max_width ? col.name.size : max_width }
  _columns = model.columns.collect do |c|
    "  %-#{width + 2}s :%s" % [c.name, c.type]
  end.join("\n")
  puts _columns
end
alias :c :fields

def py(object)
  puts object.to_yaml
end

def r
  reload!
end


# stick it in your ~/.pryrc
# use 'xsel' or 'xclip' if you're in a Linux environment
#
def _cp(obj = Readline::HISTORY.entries[-2], *options)
  if obj.respond_to?(:join) && !options.include?(:a)
    if options.include?(:s)
      obj = obj.map { |element| ":#{element.to_s}" }
    end
    out = obj.join(", ")
  elsif obj.respond_to?(:inspect)
    out = obj.is_a?(String) ? obj : obj.inspect
  end

  if out
    IO.popen('pbcopy', 'w') { |io| io.write(out) }
    "copied!"
  end
end

def _cp_help
  puts <<-HELP


  _cp - copy stuff to OS X clipboard


  If no argument is given it takes the last line in HISTORY:
    >> 5.times { "nothing"  }
    # => 5
    >> _cp
    # => "copied!"
    Pasteboard: 5.times { "nothing"  }

  Copy the result of the given argument:
    >> _cp %w[foo bar]
    # => "copied!"
    Pasteboard: foo, bar

  Convert array elements to symbols:
    >> _cp %w[foo bar], :s
    # => "copied!"
    Pasteboard: :foo, :bar

  Copy an array as syntax:
    >> _cp %w[foo bar], :a
    # => "copied!"
    Pasteboard: ["foo", "bar"]


  Copy a hash:
    >> h = { foo: 'bar', 'foo' => :bar }
    # => {:foo=>"bar", "foo"=>:bar}
    # >> _cp h
    # => "copied!"
    Pasteboard: {:foo=>"bar", "foo"=>:bar}


HELP
end

# Quick benchmarking
# Based on rue's irbrc => http://pastie.org/179534
def quickbm(repetitions=100, &block)
  require 'benchmark'

  Benchmark.bmbm do |b|
    b.report {repetitions.times &block}
  end
  nil
end

# Return only the methods not present on basic objects
class Object
  def interesting_methods
    (self.methods - Object.instance_methods).sort
  end
end

if ENV['RAILS_ENV']
  # Set up the prompt to be slightly more informative
  rails_env = ENV['RAILS_ENV'].downcase[0,3]
  current_app = Dir.pwd.split('/').last
  IRB.conf[:PROMPT].reverse_merge!(:RAILS_ENV => {:PROMPT_I=>"#{current_app} #{rails_env} >> ", :PROMPT_N=>"#{current_app} #{rails_env} >> ", :PROMPT_S=>nil, :PROMPT_C=>"?> ", :RETURN=>"=> %s\n"})
  IRB.conf[:PROMPT_MODE] = :RAILS_ENV
end