[alias]
  # View the SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --decorate

  # pretty one-line log with tags, branches and authors
  ls = log --pretty=format:'%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]' --decorate --date=short

  # a verbose ls, shows changed files too
  lsv = log --pretty=format:'%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]' --decorate --date=short --numstat

  # View the current working tree status using the short format
  s = status -sb
  st = status -sb

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  conflicts = diff --name-only --diff-filter=U

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  publish = "push -u origin HEAD"

  # Clone a repository including all submodules
  # c = clone --recursive

  c = commit --verbose

  # Mark all files and start staging interactively
  aa=!git add -N . && git add -p

  # Commit all changes
  ca = !git add -A . && git commit -av

  # Checkout
  co = checkout

  # Switch to a branch, creating it if necessary
  go = checkout -B

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  force = push --force-with-lease

  # rebase
  r = pull --rebase=preserve

  # amend
  amend = commit --amend

  # Interactive rebase with the given number of latest commits
  rewrite = "!grw() { git rebase -i HEAD~${1:-10}; }; grw"

  # Reflog with dates
  ref = reflog --date=local

  # Undo a `git push`
  undopush = push -f origin HEAD^:master

  # Search!
  search = "!search() { git log --pretty=format:'%C(yellow)%h (%an %ar) %s' --name-only -S$1; }; search"
  dfw = diff --ignore-space-change

  url =! bash -c 'git config --get remote.github.url | sed -E "s/.+:\\(.+\\)\\.git$/https:\\\\/\\\\/github\\\\.com\\\\/\\\\1/g"'

	st = status --short -uno
	ci = commit
	ca = commit --amend
	ca = commit -a --amend
	br = branch
	co = checkout
	df = diff
	lg = log -p --pretty=fuller --abbrev-commit
	lgg = log --pretty=fuller --abbrev-commit --stat
	up = pull --rebase

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[user]
	name = Charlie Tran
	email = hi@charlietran.com

[color]
  # Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = 11
  frag = magenta bold
  commit = yellow bold
  old = red bold
  new = green bold
  whitespace = normal reverse
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  tool = vimdiff
  prompt = false

 # Use `origin` as the default remote on the `master` branch in all cases
 [branch "master"]
   remote = origin
   merge = refs/heads/master
 [branch "development"]
   remote = origin
   merge = refs/heads/development

[core]
  quotepath = false
	excludesfile = /Users/chatra/.gitignore
  whitespace = space-before-tab,indent-with-non-tab,trailing-space
  editor = "/usr/local/bin/nvim"
	pager = less --tabs=4 -RFX

[mergetool]
  keepBackup = true
  prompt = false

[diff]
  mnemonicprefix = true
  renames = copies
  tool = icdiff

[difftool]
  prompt = false

[difftool "icdiff"]
  cmd = /usr/local/bin/icdiff --line-numbers $LOCAL $REMOTE

[pager]
  difftool = true
  diff = diff-so-fancy | less --tabs=4 -RFXS --pattern '^(Date|added|deleted|modified): '

[diff "nodiff"]
	command = /usr/bin/true

[push]
	default = current

[apply]
	whitespace = nowarn

[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[gitsh]
	defaultCommand = status -sb
  gitCommand = /usr/local/bin/hub
[credential]
	helper = osxkeychain
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[commit]
	template = /Users/chatra/.stCommitMsg
