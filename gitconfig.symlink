[alias]
  # View the SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph

  # pretty one-line log with tags, branches and authors
  ls = log --pretty=format:'%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]' --decorate --date=short

  # a verbose ls, shows changed files too
  lsv = log --pretty=format:'%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]' --decorate --date=short --numstat

  # View the current working tree status using the short format
  s = status -sb

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  # Checkout
  co = checkout

  # Switch to a branch, creating it if necessary
  go = checkout -B

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase --autosquash -i HEAD~10; }; r"

  # Reflog with dates
  ref = reflog --date=local

  # Undo a `git push`
  undopush = push -f origin HEAD^:master

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[user]
	name = Charlie Tran
	email = hi@charlietran.com

[color]
  # Use colors in Git commands that are capable of colored output when outputting to the terminal
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
	tool = sublime

 # Use `origin` as the default remote on the `master` branch in all cases
 [branch "master"]
   remote = origin
   merge = refs/heads/master
 [branch "development"]
   remote = origin
   merge = refs/heads/development

[core]
	quotepath = false
	excludesfile = ~/.gitignore
    whitespace = space-before-tab,indent-with-non-tab,trailing-space
    editor = "subl -w"

[mergetool]
	keepBackup = true

[diff]
	mnemonicprefix = true
	renames = copies
	tool = sublime

[push]
	default = tracking

[apply]
	whitespace = nowarn

# [branch]
# 	autosetuprebase = always
#
# [pull]
# 	rebase = preserve

[difftool "sublime"]
  cmd = subl -w "$LOCAL" "$REMOTE"
  trustExitCode = false

[mergetool "sublime"]
	cmd = subl -w $MERGED
	trustExitCode = false
