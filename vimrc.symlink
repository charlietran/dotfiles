set nobackup
set nowritebackup
set noswapfile
set nocompatible
set title
set visualbell
set noerrorbells
set clipboard=unnamed
filetype off

" Define bundles via Github repos
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'danro/rename.vim'
Plugin 'dracula/vim'
Plugin 'ervandew/supertab'
Plugin 'mileszs/ack.vim'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdcommenter'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tomtom/tcomment_vim'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-surround'
Plugin 'vim-ruby/vim-ruby'
Plugin 'vim-scripts/cmdalias.vim'
call vundle#end()
filetype plugin indent on

" ----------------------------------------------------------------------------
"  Ctrl-P Settings
" ----------------------------------------------------------------------------
set wildignore+=*/tmp/*,*/.git/*,*/log/*,*/vcr/*,*/node_modules/*,*/cache/*,*/.sass-cache/*,
set wildignore+=*.so,*.swp,*.zip,*.class,*.dat,*.db,*.dll,*.dylib,*.eot,*.eps,*.exe,*.fla,*.gif,*.ico,*.idb,*.jpg,*.lib,*.log,*.mp3,*.ncb,*.o,*.obj,*.pdb,*.psd,*.png,*.pyc,*.pyo,*.scssc,*.sdf,*.so,*.sock,*.sublime-*,*.suo,*.svg,*.ttf,*.woff,*.DS_Store

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------

set autowrite
set autoindent             " automatic indent new lines
set smartindent            " be smart about it
inoremap # X<BS>#
set nowrap                 " do not wrap lines
set softtabstop=2
set shiftwidth=2
set tabstop=2
set expandtab              " expand tabs to spaces
set smarttab
set formatoptions+=n       " support for numbered/bullet lists
"set textwidth=80           " wrap at 80 chars by default
set virtualedit=block      " allow virtual edit in visual block ..
syntax on
set background=dark
set nojoinspaces

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

let g:rspec_command = "!clear && bin/rspec {spec}"


" solarized options
" let g:solarized_visibility = "high"
" let g:solarized_contrast = "high"
" let g:solarized_termcolors = 256
" let g:solarized_termtrans = 1
" colorscheme solarized
color dracula

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
  let g:ackprg = 'ag --vimgrep'

  if !exists(":Ag")
    command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
    nnoremap \ :Ag<SPACE>
  endif
endif

" Cursor Switching

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" reformat file
nnoremap <Leader>= mmgg=G`m<CR>

" lead with ,
let mapleader = "\<Space>"
nnoremap <Leader>o :CtrlP<CR>
nnoremap <Leader>w :w<CR>

" Insert a pry statement
nmap <leader>bp orequire "pry"; ::Kernel.binding.pry<esc>^

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" exit to normal mode with 'jj'
inoremap jj <ESC>
inoremap kk <ESC>
inoremap jk <ESC>

" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk

" unimpaired
" Bubble single lines
nmap <C-k> [e
nmap <C-j> ]e

" Bubble multiple lines
vmap <C-k> [egv
vmap <C-j> ]egv

"nnoremap <F2> :set invpaste paste?<CR>
"imap <F2> <C-O>:set invpaste paste?<CR>
set pastetoggle=<F2>
" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=2                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling


" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set ignorecase
set smartcase
set hlsearch
nmap \q :nohlsearch<CR>
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set nohlsearch             " don't highlight searches
set visualbell             " shut up!

" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

" configure syntastic syntax checking to check on open as well as save
let g:syntastic_check_on_open=1
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_eruby_ruby_quiet_messages =
    \ {"regex": "possibly useless use of a variable in void context"}

function! StripWhitespace ()
  exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>

" cmap w!! w !sudo tee % > /dev/null

" Rspec
nnoremap <Leader>t :call RunCurrentSpecFile()<CR>
nnoremap <Leader>r :call RunNearestSpec()<CR>
nnoremap <Leader>e :call RunLastSpec()<CR>

" Ctrl-p
nnoremap <Leader>m :CtrlPBufTag<CR>
nnoremap <D-r> :CtrlPBufTag<CR>
nnoremap Q <Nop>
nnoremap q <Nop>

" nerd commenter
map <leader>/ <plug>NERDCommenterToggle<CR>
:nmap ; :

" Aliases
au VimEnter * if exists("loaded_cmdalias") |
      \ call CmdAlias('WQ','wq') |
      \ call CmdAlias('Wq','wq') |
      \ call CmdAlias('W','w') |
      \ call CmdAlias('Q','q') |
      \ call CmdAlias('E','e') |
      \ endif
"command! -bang Q quit<bang>
