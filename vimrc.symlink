" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
" we set it explicitly to make our position clear!
set nocompatible

filetype off " required for Vundle

" Don't create backup files or use temporary swap
set nobackup
set nowritebackup
set noswapfile

set autowrite " Automatically :write before running commands

" Install vim-plug for NeoVim with this cmd:
" curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

call plug#begin()
Plug 'benmills/vimux'
Plug 'christoomey/vim-tmux-navigator'   " navigate between vim splits / tmux panes
Plug 'ctrlpvim/ctrlp.vim'               " Fuzzy finder
Plug 'dracula/vim'                      " Dracula color theme
Plug 'ervandew/supertab'                " Tab-completion in insert mode
Plug 'janko-m/vim-test'                 " RSpec bindings
Plug 'w0rp/ale'                         " Async Linting Engine
Plug 'scrooloose/nerdcommenter'         " Commenting
Plug 'tpope/vim-eunuch'                 " helpers for Unix shell cmds (move, rename, etc)
Plug 'tpope/vim-unimpaired'             " Text manipulation helpers
Plug 'tpope/vim-rails'                  " Rails helpers
Plug 'tpope/vim-surround'               " Gives s modifier to surround/delete quotes/parents
Plug 'vim-ruby/vim-ruby'                " Ruby helpers
Plug 'vim-scripts/cmdalias.vim'         " Simple command aliases
Plug 'Konfekt/FastFold'                 " Folding performance improvement
Plug 'tpope/vim-fugitive'               " Git commands
Plug 'tpope/vim-rhubarb'                " Open current file / lines in Github
Plug 'airblade/vim-gitgutter'           " Adds visual indicators of git diff in gutter
Plug 'chrisbra/csv.vim'
Plug 'mzlogin/vim-markdown-toc'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'ludovicchabant/vim-gutentags'
Plug 'AndrewRadev/linediff.vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
call plug#end()

filetype plugin indent on " Load plugins according to detected filetype.
syntax on " Enable syntax highlighting.

" Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing
"let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"

" files to ignore
" ----------------------------------------------------------------------------
set wildignore+=*/.git/*
set wildignore+=*/node_modules/*
set wildignore+=node_modules
set wildignore+=*/tmp/*
set wildignore+=*/log/*
set wildignore+=*/vcr/*
set wildignore+=*/cache/*
set wildignore+=*/.sass-cache/*

set wildignore+=*.so,*.swp,*.zip,*.class,*.dat,*.db,*.dll,*.dylib,*.eot,*.eps,*.exe,*.fla,*.gif
set wildignore+=*.ico,*.idb,*.jpg,*.lib,*.log,*.mp3,*.ncb,*.o,*.obj,*.pdb,*.psd,*.png,*.pyc,*.pyo
set wildignore+=*.scssc,*.sdf,*.so,*.sock,*.sublime-*,*.suo,*.svg,*.ttf,*.woff,*.DS_Store,.*.un*

set foldmethod=indent
set foldlevel=99

"  text formatting
" ----------------------------------------------------------------------------
set autoindent             " automatic indent new lines
set smartindent            " be smart about it
set nowrap                 " do not wrap lines
set formatoptions+=n       " support for numbered/bullet lists
set virtualedit=block      " allow virtual edit in visual block ..

" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab
set smarttab

" Use one space, not two, after punctuation.
set nojoinspaces

set background=dark
set cursorline

" Netrw File Browser Settings
"""""""""""""""""""""""""""""
let g:netrw_banner = 0            " Disable netrw (Ex) banner
let g:netrw_liststyle = 3         " Use tree-style listing
" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undo')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respesdts .gitignore
  let g:ctrlp_user_command = 'ag --ignore ''_site/*'' --ignore ''.happypack/*'' --follow --skip-vcs-ignores --literal --files-with-matches --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
  let g:ctrlp_cache_dir = '/tmp/ctrlp'

  let g:NERDTreeChDirMode       = 2
  let g:ctrlp_working_path_mode = 'rw'

  if !exists(":Ag")
    command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
    nnoremap \ :Ag<SPACE>
  endif
endif

let g:loaded_sql_completion = 0
let g:omni_sql_no_default_maps = 1

" UI settings
" -----------------------------------------------------------------------------
color dracula              " Use dracula theme
set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
"set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=1                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Display extra whitespace
"set list listchars=tab:»·,trail:·,nbsp:·

" Make it obvious where 100 characters is
set textwidth=100
set colorcolumn=+1

" different cursors for normal vs insert mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" visual cues
set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set ignorecase             " ignore case when searching
set smartcase              " case sensitive search when upcase is present
set incsearch              " do incremental searching
set nohlsearch             " don't highlight searches
set visualbell
set noerrorbells

" Gutentags
"let g:gutentags_trace = 1

" Statusline
set laststatus=2 " always show the status line
set statusline=%f
set statusline+=\ %h%m%r
set statusline+=%=%-14.(%l,%c%V%)
set statusline+=\ %#warningmsg#
set statusline+=\ %{gutentags#statusline()}
"set statusline+=\ %{SyntasticStatuslineFlag()}
hi StatusLine ctermfg=231 ctermbg=240 cterm=bold guifg=#f8f8f2 guibg=#64666d gui=bold
hi StatusLineNC ctermfg=231 ctermbg=236 cterm=NONE guifg=#f8f8f2 guibg=#64666d gui=NONE
"set statusline+=%*

" ale configuration
let g:ale_ruby_reek_show_wiki_link  = 1

" use Prettier for JS and HTML
let g:ale_fixers = {
\   'javascript': ['prettier','eslint'],
\   'css': ['prettier'],
\   'html': ['prettier'],
\}
let g:ale_fix_on_save = 1

" configure syntastic syntax checking to check on open as well as save
"let g:syntastic_always_populate_loc_list = 0
"let g:syntastic_auto_loc_list = 0
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
"let g:syntastic_eruby_ruby_quiet_messages =
      "\ {"regex": "assigned but unused variable"}
"let g:syntastic_ruby_checkers = ['mri', 'rubocop']

" Leader Bindings
" -----------------------------------------------------------------------------

" spacebar for leader key
let mapleader = "\<Space>"

" Puts debug
nmap <leader>d puts '#'*90<esc>oputs '#'*90<esc>o<esc>kOputs <esc>i

" Switch between the last two files
nnoremap <NUL> <c-^>
nnoremap <c-space> <c-^>

" reformat file
"nnoremap <leader>= mmgg=G`m<CR>

" Rspec command shortcuts
"let g:rspec_command = "Start bin/rspec --format documentation {spec}"
let test#strategy = "vimux"
"let test#ruby#rspec#executable="bin/rspec"
let test#ruby#rspec#executable = "bin/rspec"
"let test#ruby#rspec#options = "--format documentation"
let VimuxUseNearest = 1
let g:VimuxHeight = "40"

"nnoremap <f10> :VimuxZoomRunner<CR>
"inoremap <f10> <Esc>:VimuxZoomRunner<CR>

nnoremap <f10> :call _VimuxTmux("resize-pane -Z -t ".g:VimuxRunnerIndex) <bar> :call _VimuxTmux("copy-mode")<CR>
inoremap <f10> :call _VimuxTmux("resize-pane -Z -t ".g:VimuxRunnerIndex) <bar> :call _VimuxTmux("copy-mode")<CR>

nnoremap <leader>t :TestFile<CR>
nnoremap <leader>r :TestNearest<CR>
nnoremap <leader>e :VimuxRunLastCommand<CR>

"jump to alternate
nnoremap <leader>a :A<CR>

" Show current file in Github.com (fugitive)
nnoremap <leader>g :Gbrowse<CR>
vmap <leader>g :Gbrowse<CR>

" Git blame
nnoremap <leader>b :Gblame<CR>

" CtrlP jump to file
nnoremap <leader>o :CtrlP<CR>
" CtrlP jump to tag in current buffer
nnoremap <leader>m :CtrlPBufTag<CR>
" Explore fodler of the current file
map <leader>f :e <C-R>=expand("%:p:h") . "/" <CR><CR>

" leader-w to save file
nnoremap <leader>w :w<CR>

" leader-q to quit
nnoremap <leader>q :q<CR>

" nerd commenter
map <leader>/ <plug>NERDCommenterToggle<CR>

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Paste from previous register
nnoremap <C-p> "1p

" interact with Mac clipboard
map <leader>y "*y
map <leader>Y "*Y$
map <leader>p "*p
map <leader>P "*P

" split screen
map <leader>\ :vsp<CR>
map <leader>- :sp<CR>

"Quickfix Toggle
command! -bang -nargs=? QFix call QFixToggle(<bang>0)
function! QFixToggle(forced)
  if exists("g:qfix_win") && a:forced == 0
    cclose
    unlet g:qfix_win
  else
    copen 10
    let g:qfix_win = bufnr("$")
  endif
endfunction
nnoremap <silent> <leader>l :QFix<CR>

"Prettify JSON
command! JSONpretty %!python -m json.tool

" Rspec Syntax Conversion
function! ConvertRspec()
  let @a="Iexpect(\<esc>/\\.should\\sct ).to\<esc>"
  :g/\.should\s/norm! @a
  let @a="Iexpect(\<esc>/\\.should_not\\sct ).not_to\<esc>"
  :g/\.should_not\s/norm! @a
  :%s/\.to ==/.to eq/
  :%s/\.not_to ==/.not_to eq/
  let @a=""
endfunction

" Custom mapping
" -----------------------------------------------------------------------------

" exit to normal mode with 'jj', 'jk', or 'kk'
inoremap jj <ESC>
inoremap kk <ESC>
inoremap jk <ESC>
inoremap kj <ESC>

" remap ; to :
nnoremap ; :
vnoremap ; :

" ctrl-c acts like normal escape from insert mode
inoremap <C-c> <ESC>

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk

" K to split lines
nnoremap K i<CR><Esc>

" Select all
"map <C-a> <esc>ggVG<CR>

" Unbind Q
"map Q <Nop>
"map q <Nop>

" Enable basic mouse behavior such as resizing buffers.
set mouse=a

" Vimrc shortcut
nnoremap <tab>vim :tabe ~/.vimrc<cr>

" Git config shortcut
nnoremap <tab>git :tabe ~/.gitconfig<cr>

" Tmux config shortcut
nnoremap <tab>tmux :tabe ~/.tmux.conf<cr>

" Simpler redo shortcut
nmap U <c-r>

" x to delete without copying, X to delete line without copying
nnoremap x "_x
vnoremap x "_x
nnoremap X "_dd
vnoremap X "_dd

" Bind Shift-H/Shift-L to beginning / end of line
nnoremap H ^
vnoremap H ^
nnoremap L $
vnoremap L $

" Jump to beginning / end of line in insert mode
inoremap <C-a> <ESC>^i
inoremap <C-e> <ESC>$a

" Semicolon to enter console
"nnoremap ; :
"vnoremap ; :

" Open the current file with Mac default app
nnoremap <silent> <F5> :!open %:p<CR><CR>

if has("autocmd")
  " remove trailing white spaces
  fun! StripTrailingWhitespace()
      " Don't strip on these filetypes
      if &ft =~ 'markdown'
          return
      endif
      %s/\s\+$//e
  endfun

  autocmd BufWritePre * call StripTrailingWhitespace()

  " Disable auto-commenting
  autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

endif

" Formatting Rules for Markdown
augroup Markdown
  autocmd!
  autocmd BufNew,BufRead *.md setlocal textwidth=80 wrapmargin=0
augroup END

" Formatting Rules for Pico8
augroup Pico8
  autocmd!
  autocmd BufNew,BufRead *.p8 set filetype=lua
augroup END

" Neovim window navigation
if has('nvim')
  :tnoremap <A-h> <C-\><C-n><C-w>h
  :tnoremap <A-j> <C-\><C-n><C-w>j
  :tnoremap <A-k> <C-\><C-n><C-w>k
  :tnoremap <A-l> <C-\><C-n><C-w>l
  :nnoremap <A-h> <C-w>h
  :nnoremap <A-j> <C-w>j
  :nnoremap <A-k> <C-w>k
  :nnoremap <A-l> <C-w>l
endif

"Auto complete and re-indent HTML when typing </
":inoremap <lt>/ </<C-x><C-o><Esc>==gi
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags

" Aliases
" -----------------------------------------------------------------------------
" generic, typo-preventing aliases
au VimEnter * if exists("loaded_cmdalias") |
      \ call CmdAlias('WQ','wq') |
      \ call CmdAlias('Wq','wq') |
      \ call CmdAlias('W','w') |
      \ call CmdAlias('Q','q') |
      \ call CmdAlias('E','e') |
      \ call CmdAlias('ex','Ex') |

" vim-rails specific aliases
au VimEnter * if exists("loaded_cmdalias") |
      \ call CmdAlias('em','Emodel') |
      \ call CmdAlias('ec','Econtroller') |
      \ call CmdAlias('ev','Eview') |
      \ call CmdAlias('av','AV') |
      \ call CmdAlias('Av','AV') |
      \ call CmdAlias('a','A') |
